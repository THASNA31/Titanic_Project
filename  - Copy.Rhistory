getwd()
install.packages("dplyr")
install.packages("lmtest")
library(zoo)
library(lmtest)
library(dplyr)
data <- read.csv("train.csv")
attach(data)
data <- select(data, Survived,Pclass,Sex,Age,SibSp,Parch,Fare)
miss_count <- as.numeric(sum(is.na(data$Age)))
avg_age <- mean(data$Age, na.rm = TRUE)
sd_age <- sd(data$Age, na.rm = TRUE)
repeat {
impute_age_NA <- rnorm(miss_count,avg_age,sd_age)
if ((length(which(impute_age_NA<0)))==0){break}
}
# Imputuing the generated datasets into the missing age values
data <- data[order(data$Age,na.last = F), ]
data$Age[1:miss_count] <- impute_age_NA
train_data<- data[1:600,]
valid_data <- data [601:dim(data)[1],]
train_data$Sex<- sapply(as.character(train_data$Sex),switch, "male"=1,"female"=0, USE.NAMES = F)
train_data$Pclass <- as.numeric(train_data$Pclass)
train_data$Sex <- as.numeric(train_data$Sex)
train_data$Age <- as.numeric(train_data$Age)
train_data$SibSp <- as.numeric(train_data$SibSp)
train_data$Parch <- as.numeric(train_data$Parch)
train_data$Fare <- as.numeric(train_data$Fare)
valid_data$Sex<- sapply(as.character(valid_data$Sex),switch, "male"=1,"female"=0, USE.NAMES = F)
valid_data$Pclass <- as.numeric(valid_data$Pclass)
valid_data$Sex <- as.numeric(valid_data$Sex)
valid_data$Age <- as.numeric(valid_data$Age)
valid_data$SibSp <- as.numeric(valid_data$SibSp)
valid_data$Parch <- as.numeric(valid_data$Parch)
valid_data$Fare <- as.numeric(valid_data$Fare)
model_1 <- glm(Survived ~ Pclass + Name + Sex + Age + SibSp + Parch + Fare, data = train_data)
model_1 <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data = train_data)
summary(model_1)
rcorr(as.matrix(train_data),type = ("spearman"))
install.packages("Hmisc")
library(Hmisc)
rcorr(as.matrix(train_data),type = ("spearman"))
model_5 <- glm(Survived ~ Pclass + Sex + Age + SibSp, data = train_data, family = binomial)
summary(model_5)
anova(model_5)
fitted.results <- predict(model_5,newdata=subset(valid_data,select=c(2,3,4,5)),type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != valid_data$Survived)
print(paste('Accuracy',1-misClasificError))
p <- predict(model_5, newdata=subset(valid_data,select=c(2,3,4,5)), type="response")
pr <- prediction(p, valid_data$Survived)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
install.packages("ROCR")
library(ROCR)
p <- predict(model_5, newdata=subset(valid_data,select=c(2,3,4,5)), type="response")
pr <- prediction(p, valid_data$Survived)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
install.packages("randomForest")
install.packages("MASS")
library(randomForest)
library(MASS)
# It is imperative to change the class of response variable to "Factor" to apply random forest.
data$Survived <- as.factor(data$Survived)
# It is imperative to change the class of response variable to "Factor" to apply random forest.
data$Survived <- as.factor(data$Survived)
train_data$Survived <- as.factor(train_data$Survived)
valid_data$Survived <- as.factor(valid_data$Survived)
surv.rf <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data = data)
surv.rf <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, data = data)
print(surv.rf)
predictions=as.vector(surv.rf$votes[,2])
pred=prediction(predictions,Survived)
perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUC=perf_AUC@y.values[[1]]
perf_ROC=performance(pred,"tpr","fpr") #plot the actual ROC curve
plot(perf_ROC, main="ROC plot")
AUC
mlr.auc <- performance(pr, measure = "auc")
mlr.auc <- mlr.auc@y.values[[1]]
mlr.auc
rf.AUC=performance(pred,"auc") #Calculate the AUC value
rf.AUC=rf_AUC@y.values[[1]]
perf_ROC=performance(pred,"tpr","fpr") #plot the actual ROC curve
rf.AUC=rf.AUC@y.values[[1]]
perf_ROC=performance(pred,"tpr","fpr") #plot the actual ROC curve
plot(perf_ROC, main="ROC plot")
text(0.5,0.5,paste("AUC = ",format(AUC, digits=5, scientific=FALSE)))
rf.AUC
